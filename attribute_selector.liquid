
<style>
  /*
  ***********************************************************
  ***********************************************************
  形如这部分的是css代码
  css代码负责的功能为设置网页的显示样式，以及设置选中变体的样式
  ***********************************************************
  ***********************************************************
  */
  .product {
    display: flex;
    flex-wrap: wrap;
  }
  .variant {
    margin-right: 10px;
    text-align: center; /* 让文字居中显示 */
  }
  .variant img {
    display: block;
  }
  .variant-size {
    display: block;
  }
  .selected {
    border: 2px solid green; /* 添加绿色边框 */
  }
  .hovered {
    border: 1px solid lightgray; /* 添加浅灰色边框 */
  }
  /* 添加显示选中属性信息的样式 */
  .selected-attributes {
    display: flex;
    justify-content: space-between; /* 实现左右对齐 */
    align-items: center; /* 确保子元素垂直居中 */
    margin-bottom: 20px;
  }
  .selected-attributes span {
    flex: 1; /* 使两个 span 标签平分空间 */
    text-align: center; /* 使文本居中显示 */
  }
  /* 单独设置 size 的左对齐 */
  .selected-attributes #selected-size {
    text-align: left;
  }

  .selected-prices {
  display: flex;
  flex-direction: column; /* 设置为列布局，使子元素垂直排列 */
}

#selected-new_price {
  color: rgb(204, 0, 0); /* 设置字体颜色为红色 */
  font-weight: bold; /* 字体加粗 */
  font-size: 2em; /* 字体大小是selected-old_price的两倍 */
}

#selected-old_price {
  color: black; /* 设置字体颜色为黑色 */
  text-decoration: line-through; /* 添加删除线 */
  font-weight: normal; /* 字体不加粗 */
  font-size: 1em; /* 设置基础字体大小 */
}

.container {
  display: flex; /* 使用Flexbox布局 */
  align-items: center; /* 垂直居中对齐 */
  padding: 5px;
}

.quantity-selector,
.selected-show_inventory {
  margin-right: 10px; /* 添加右边距 */
}

/* 其他样式保持不变 */
.quantity-selector input {
  text-align: center;
  border: 2px solid #ccc; /* 浅灰色边框 */
  border-radius: 15px; /* 椭圆形边框 */
  width: auto; /* 自适应宽度 */
  padding: 5px 10px; /* 内边距 */
}

.quantity-selector button {
  background-color: #f2f2f2;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

.quantity-selector button:active {
  background-color: #e6e6e6;
}

.add-to-cart-button {
  background-color: #0F8800; /* 鲜艳的绿色背景 */
  color: white; /* 白色文字 */
  padding: 20px 40px; /* 增加内边距 */
  text-align: center; /* 文字居中 */
  text-decoration: none; /* 无文本装饰 */
  display: block; /* 更改为块状显示以居中按钮 */
  font-size: 20px; /* 增加字体大小 */
  width: 100%; /* 宽度设置为100%以占据所有可用空间 */
  margin: 4px auto; /* 更新外边距以自动水平居中 */
  cursor: pointer; /* 鼠标指针变成手形 */
  border: none; /* 无边框 */
  border-radius: 160px; /* 增加圆角半径以获得更圆的角 */
}

/* 鼠标悬停时的样式 */
.add-to-cart-button:hover {
  background-color: #094b01;
}


</style>

<!--
  ***********************************************************
  ***********************************************************
  形如这部分的是html代码，通常代码开头结尾有尖括号<></xx>
  html代码负责的功能为创建内容容器
  即网页需要显示什么内容:按钮、文本、输入框。。。
  ***********************************************************
  ***********************************************************

-->
<!-- 添加显示选中属性信息的容器 -->
<div class="selected-attributes">
  <span id="selected-size">Select Size (cm): xxx</span> <!-- 左对齐 -->
  <span id="selected-sku">SKU#: xxxxxx-xxxx</span> <!-- 居中对齐 -->
</div>

<!--
  ***********************************************************
  形如这部分的是liquid代码，如下面的用法所示，liquid代码常用的使用
  场景为和html代码互相嵌套生成网页内容
  以及和shopify后台交互获取信息
  ***********************************************************
-->

{% for product in collections.all.products %}
  <div class="product">
    <!-- 显示产品尺寸属性 -->
    {% for variant in product.variants %}
      <!-- 检查变体标题是否为 'Default Title'，如果不是，则显示 -->
      {% if variant.title != 'Default Title' %}
        <div class="variant">
          {% if variant.image %}
            <img class="variant-select" 
            data-variant-id="{{ variant.id }}" 
            src="{{ variant.image | img_url: '80x80' }}" 
            alt="{{ variant.title | escape }}" 
            data-variant-size="{{ variant.title }}" 
            data-variant-sku="{{ variant.sku }}" 
            data-variant-new_price="{{ variant.price | money_without_currency }}"
            data-variant-original_price="{{ variant.compare_at_price | money_without_currency }}"
            data-variant-inventory_quantity="{{ variant.inventory_quantity }}">
          {% endif %}
          <span class="variant-size">{{ variant.title }}</span> <!-- 将文字移动到图片下面 -->
        </div>
      {% endif %}
    {% endfor %}
  </div>
{% endfor %}

<!-- 添加显示价钱 -->
<div class="selected-prices">
  <span id="selected-new_price">$xxxx.xx Sale</span>
  <span id="selected-old_price">Orig: $xxxx.xx</span>
</div>

<!-- Flex容器 -->
<div class="container">
  <!-- 数量选择器 -->
  <div class="quantity-selector">
    <button onclick="changeQuantity(-1)">-</button>
    <input type="number" id="quantity" value="1">
    <button onclick="changeQuantity(1)">+</button>
  </div>

  <!-- 库存显示 -->
  <div class="selected-show_inventory">
    <span id="selected-inventory_quantity_now">Quantity:0</span>
  </div>
</div>
    
    <!-- 加入购物车按钮## -->
    <!--############################################################################
      @由于add to carts 的操作逻辑比较复杂，所以这个功能的代码直接用shopify的官方代码修改。
      @修改于shopify官方的 add to cart：buy-buttons.liquid 修改的内容在下面列出
      @修改样式:add-to-cart-button
      @修改提交的表单的数据:根据之前JavaScript的代码选中的物品来提交对应的表单
      ##############################################################################-->
<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}

    <product-form
      class="product-form"
      data-hide-errors="{{ gift_card_recipient_feature_active }}"
      data-section-id="{{ section.id }}"
    >
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <svg
          aria-hidden="true"
          focusable="false"
          class="icon icon-error"
          viewBox="0 0 13 13"
        >
          <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
          <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
          <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
          <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
        </svg>
        <span class="product-form__error-message"></span>
      </div>

      {%- form 'product',
        product,
        id: product_form_id,
        class: 'form',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input
          type="hidden"
          name="id"
          value="{{ product.selected_or_first_available_variant.id }}"
          disabled
          class="product-variant-id"
        >

        {%- if gift_card_recipient_feature_active -%}
          {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
        {%- endif -%}

        <div class="product-form__buttons">
          {%- liquid
            assign check_against_inventory = true
            if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
              assign check_against_inventory = false
            endif
            if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
              assign quantity_rule_soldout = true
            endif
          -%}
          <button
          id="ProductSubmitButton-{{ section_id }}"
          type="submit"
          name="add"
          class="add-to-cart-button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
          {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
            disabled
          {% endif %}
          >
            <span>
              {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                {{ 'products.product.sold_out' | t }}
              {%- else -%}
                {{ 'products.product.add_to_cart' | t }}
              {%- endif -%}
            </span>
            <div class="loading-overlay__spinner hidden">
              <svg
                aria-hidden="true"
                focusable="false"
                class="spinner"
                viewBox="0 0 66 66"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
              </svg>
            </div>
          </button>
          {%- if show_dynamic_checkout -%}
            {{ form | payment_button }}
          {%- endif -%}
        </div>
      {%- endform -%}
    </product-form>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="add-to-cart-button button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}

    <pickup-availability
      class="product__pickup-availabilities no-js-hidden quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          {% render 'icon-unavailable' %}
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>

    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>


<script>
/*
************************************************************
************************************************************
这部分是JavaScript代码
负责的是一些动态效果，比如变量的计算和一些值的更新
************************************************************
************************************************************
*/
  //定义全局变量
  var max_inventory_quantity = 0;

  document.addEventListener('DOMContentLoaded', function() {
  // 确保DOM完全加载后执行以下代码
  let firstVariant = document.querySelector('.variant-select');
  if (firstVariant) {
    // 模拟点击第一个变体选择器以更新价格
    firstVariant.click();
  }
  });

  document.querySelectorAll('.variant-select').forEach(function(img) {
    img.addEventListener('click', function() {
      // 移除所有已选中的元素的选中状态
      document.querySelectorAll('.selected').forEach(function(selected) {
        selected.classList.remove('selected');
      });
      
      // 给选中的元素添加选中状态
      this.parentElement.classList.add('selected');
      
      // 更新显示选中属性信息的容器
      document.getElementById('selected-size').textContent = 'Select Size (cm): ' + this.dataset.variantSize;
      document.getElementById('selected-sku').textContent = 'SKU#: ' + this.dataset.variantSku;

      // 更新显示价钱的信息容器
      document.getElementById('selected-new_price').textContent = '$' + this.dataset.variantNew_price + ' Sale';
      document.getElementById('selected-old_price').textContent = 'Orig: $' + this.dataset.variantOriginal_price;

      // 更新显示库存的信息容器
      document.getElementById('selected-inventory_quantity_now').textContent = 'Quantity: ' + this.dataset.variantInventory_quantity;
      max_inventory_quantity = this.dataset.variantInventory_quantity;

      // 更新数量选择器
      changeQuantityMax(1,1);
    });

    // 处理鼠标悬停事件
    img.addEventListener('mouseover', function() {
      // 只有当元素没有被选中时，才添加悬停状态
      if (!this.parentElement.classList.contains('selected')) {
        this.parentElement.classList.add('hovered');
      }
    });
    img.addEventListener('mouseout', function() {
      this.parentElement.classList.remove('hovered');
    });
  });

  function changeQuantity(change) {
    changeQuantityMax(change,max_inventory_quantity);
  }

  function changeQuantityMax(change,max_inventory_quantity){
    var quantityInput = document.getElementById('quantity');
    var currentQuantity = parseInt(quantityInput.value);
    currentQuantity += change;
    if(currentQuantity > max_inventory_quantity){
      currentQuantity = max_inventory_quantity;
    }
    quantityInput.value = currentQuantity > 0 ? currentQuantity : 0;
  }

  document.querySelector('.add-to-cart-button').addEventListener('click', function() {
    alert('已添加到购物车！');
  });

</script>
