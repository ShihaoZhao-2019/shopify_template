
<style>
  /*
  ***********************************************************
  ***********************************************************
  形如这部分的是css代码
  css代码负责的功能为设置网页的显示样式，以及设置选中变体的样式
  ***********************************************************
  ***********************************************************
  */
  .product {
    display: flex;
    flex-wrap: wrap;
  }
  .variant {
    margin-right: 10px;
    text-align: center; /* 让文字居中显示 */
  }
  .variant img {
    display: block;
  }
  .variant-size {
    display: block;
  }
  .selected {
    border: 2px solid green; /* 添加绿色边框 */
  }
  .hovered {
    border: 1px solid lightgray; /* 添加浅灰色边框 */
  }
  /* 添加显示选中属性信息的样式 */
  .selected-attributes {
    display: flex;
    justify-content: space-between; /* 实现左右对齐 */
    align-items: center; /* 确保子元素垂直居中 */
    margin-bottom: 20px;
  }
  .selected-attributes span {
    flex: 1; /* 使两个 span 标签平分空间 */
    text-align: center; /* 使文本居中显示 */
  }
  /* 单独设置 size 的左对齐 */
  .selected-attributes #selected-size {
    text-align: left;
  }

  .selected-prices {
  display: flex;
  flex-direction: column; /* 设置为列布局，使子元素垂直排列 */
}

#selected-new_price {
  color: rgb(204, 0, 0); /* 设置字体颜色为红色 */
  font-weight: bold; /* 字体加粗 */
  font-size: 2em; /* 字体大小是selected-old_price的两倍 */
}

#selected-old_price {
  color: black; /* 设置字体颜色为黑色 */
  text-decoration: line-through; /* 添加删除线 */
  font-weight: normal; /* 字体不加粗 */
  font-size: 1em; /* 设置基础字体大小 */
}

.container {
  display: flex; /* 使用Flexbox布局 */
  align-items: center; /* 垂直居中对齐 */
  padding: 5px;
}

.quantity-selector,
.selected-show_inventory {
  margin-right: 10px; /* 添加右边距 */
}

/* 其他样式保持不变 */
.quantity-selector input {
  text-align: center;
  border: 2px solid #ccc; /* 浅灰色边框 */
  border-radius: 15px; /* 椭圆形边框 */
  width: auto; /* 自适应宽度 */
  padding: 5px 10px; /* 内边距 */
}

.quantity-selector button {
  background-color: #f2f2f2;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

.quantity-selector button:active {
  background-color: #e6e6e6;
}

</style>

<!--
  ***********************************************************
  ***********************************************************
  形如这部分的是html代码，通常代码开头结尾有尖括号<></xx>
  html代码负责的功能为创建内容容器
  即网页需要显示什么内容:按钮、文本、输入框。。。
  ***********************************************************
  ***********************************************************

-->
<!-- 添加显示选中属性信息的容器 -->
<div class="selected-attributes">
  <span id="selected-size">Select Size (cm): xxx</span> <!-- 左对齐 -->
  <span id="selected-sku">SKU#: xxxxxx-xxxx</span> <!-- 居中对齐 -->
</div>

<!--
  ***********************************************************
  形如这部分的是liquid代码，如下面的用法所示，liquid代码常用的使用
  场景为和html代码互相嵌套生成网页内容
  以及和shopify后台交互获取信息
  ***********************************************************
-->

{% for product in collections.all.products %}
  <div class="product">
    <!-- 显示产品尺寸属性 -->
    {% for variant in product.variants %}
      <!-- 检查变体标题是否为 'Default Title'，如果不是，则显示 -->
      {% if variant.title != 'Default Title' %}
        <div class="variant">
          {% if variant.image %}
            <img class="variant-select" 
            data-variant-id="{{ variant.id }}" 
            src="{{ variant.image | img_url: '80x80' }}" 
            alt="{{ variant.title | escape }}" 
            data-variant-size="{{ variant.title }}" 
            data-variant-sku="{{ variant.sku }}" 
            data-variant-new_price="{{ variant.price | money_without_currency }}"
            data-variant-original_price="{{ variant.compare_at_price | money_without_currency }}"
            data-variant-inventory_quantity="{{ variant.inventory_quantity }}">
          {% endif %}
          <span class="variant-size">{{ variant.title }}</span> <!-- 将文字移动到图片下面 -->
        </div>
      {% endif %}
    {% endfor %}
  </div>
{% endfor %}

<!-- 添加显示价钱 -->
<div class="selected-prices">
  <span id="selected-new_price">$xxxx.xx Sale</span>
  <span id="selected-old_price">Orig: $xxxx.xx</span>
</div>

<!-- Flex容器 -->
<div class="container">
  <!-- 数量选择器 -->
  <div class="quantity-selector">
    <button onclick="changeQuantity(-1)">-</button>
    <input type="number" id="quantity" value="1">
    <button onclick="changeQuantity(1)">+</button>
  </div>

  <!-- 库存显示 -->
  <div class="selected-show_inventory">
    <span id="selected-inventory_quantity_now">Quantity:0</span>
  </div>
</div>

<script>
/*
************************************************************
************************************************************
这部分是JavaScript代码
负责的是一些动态效果，比如变量的计算和一些值的更新
************************************************************
************************************************************
*/
  //定义全局变量
  var max_inventory_quantity = 0;

  document.addEventListener('DOMContentLoaded', function() {
  // 确保DOM完全加载后执行以下代码
  let firstVariant = document.querySelector('.variant-select');
  if (firstVariant) {
    // 模拟点击第一个变体选择器以更新价格
    firstVariant.click();
  }
  });

  document.querySelectorAll('.variant-select').forEach(function(img) {
    img.addEventListener('click', function() {
      // 移除所有已选中的元素的选中状态
      document.querySelectorAll('.selected').forEach(function(selected) {
        selected.classList.remove('selected');
      });
      
      // 给选中的元素添加选中状态
      this.parentElement.classList.add('selected');
      
      // 更新显示选中属性信息的容器
      document.getElementById('selected-size').textContent = 'Select Size (cm): ' + this.dataset.variantSize;
      document.getElementById('selected-sku').textContent = 'SKU#: ' + this.dataset.variantSku;

      // 更新显示价钱的信息容器
      document.getElementById('selected-new_price').textContent = '$' + this.dataset.variantNew_price + ' Sale';
      document.getElementById('selected-old_price').textContent = 'Orig: $' + this.dataset.variantOriginal_price;

      // 更新显示库存的信息容器
      document.getElementById('selected-inventory_quantity_now').textContent = 'Quantity: ' + this.dataset.variantInventory_quantity;
      max_inventory_quantity = this.dataset.variantInventory_quantity;

      // 更新数量选择器
      changeQuantityMax(1,1);
    });

    // 处理鼠标悬停事件
    img.addEventListener('mouseover', function() {
      // 只有当元素没有被选中时，才添加悬停状态
      if (!this.parentElement.classList.contains('selected')) {
        this.parentElement.classList.add('hovered');
      }
    });
    img.addEventListener('mouseout', function() {
      this.parentElement.classList.remove('hovered');
    });
  });

  function changeQuantity(change) {
    changeQuantityMax(change,max_inventory_quantity);
  }

  function changeQuantityMax(change,max_inventory_quantity){
    var quantityInput = document.getElementById('quantity');
    var currentQuantity = parseInt(quantityInput.value);
    currentQuantity += change;
    if(currentQuantity > max_inventory_quantity){
      currentQuantity = max_inventory_quantity;
    }
    quantityInput.value = currentQuantity > 0 ? currentQuantity : 0;
  }
</script>


